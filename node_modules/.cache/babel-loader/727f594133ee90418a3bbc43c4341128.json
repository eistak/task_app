{"ast":null,"code":"var _jsxFileName = \"/Users/etakahashi/react-ws/persol-react-training/task_app_ts/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//const taskUrl = 'http://localhost/api/v1/tasks';\nconst taskUrl = 'https://jsonplaceholder.typicode.com/posts';\n\nfunction App() {\n  _s();\n\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    fetch(taskUrl).then(response => response.text()).then(message => {\n      setMessage(message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"App-title\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"App-intro\",\n      children: [\"To get started, edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n        children: \"src/App.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 34\n      }, this), \" and save to reload.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n} // function App() {\n//   const [todoList, setTodoList] = useState([]);\n//   useEffect(()=>{\n//     const fetchData = async() => {\n//       const response = await axios.get(taskUrl);\n//       setTodoList(response.data);\n//     };\n//     fetchData();\n//   }, []);\n//   const inCompletedList = todoList.filter((todo) =>{\n//     // return !todo.done;\n//   });\n//   const completedList = todoList.filter((todo) => {\n//     // return todo.done;\n//   });\n//   return (\n//     <>\n//       <h1>Todo List</h1>\n//       <textarea />\n//       <button>add Todo</button>\n//       <h2>未完了TODOリスト</h2>\n//       <ul>\n//         {/* {inCompletedList.map((todo)=>(\n//           <li key={todo.id}>\n//             {todo.content}\n//             <button>{todo.done ? \"未完了リストへ\": \"完了リストへ\"}</button>\n//             <button>delete</button>\n//           </li>\n//       ))} */}\n//       </ul>\n//       <h2>完了TODOリスト</h2>\n//       <ul>\n//         {/* {completedList.map((todo)=>(\n//           <li key={todo.id}>\n//             {todo.content}\n//           </li>\n//         ))} */}\n//       </ul>\n//     </>\n//   );\n// }\n\n\n_s(App, \"ClLa+zvPL6vd0LAuHSvav3BaFBg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/etakahashi/react-ws/persol-react-training/task_app_ts/src/App.tsx"],"names":["React","useState","useEffect","logo","taskUrl","App","message","setMessage","fetch","then","response","text"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP;;AAIA;AACA,MAAMC,OAAO,GAAG,4CAAhB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAACJ,OAAD,CAAL,CACGK,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQH,OAAO,IAAI;AACfC,MAAAA,UAAU,CAACD,OAAD,CAAV;AACD,KAJH;AAKD,GANQ,EAMP,EANO,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACA;AAAK,QAAA,GAAG,EAAEH,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAI,QAAA,SAAS,EAAC,WAAd;AAAA,kBAA2BG;AAA3B;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA,uDACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADzB;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAGD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GArESD,G;;KAAAA,G;AAuET,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\n\n//const taskUrl = 'http://localhost/api/v1/tasks';\nconst taskUrl = 'https://jsonplaceholder.typicode.com/posts';\n\n\nfunction App() {\n  const [message, setMessage] = useState(\"\")\n\n  useEffect(() => {\n    fetch(taskUrl)\n      .then(response => response.text())\n      .then(message => {\n        setMessage(message);\n      });\n  },[])\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n        <h1 className=\"App-title\">{message}</h1>\n        </header>\n        <p className=\"App-intro\">\n            To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n    </div>\n)\n\n}\n\n\n// function App() {\n//   const [todoList, setTodoList] = useState([]);\n  \n//   useEffect(()=>{\n//     const fetchData = async() => {\n//       const response = await axios.get(taskUrl);\n//       setTodoList(response.data);\n//     };\n//     fetchData();\n//   }, []);\n\n//   const inCompletedList = todoList.filter((todo) =>{\n//     // return !todo.done;\n//   });\n//   const completedList = todoList.filter((todo) => {\n//     // return todo.done;\n//   });\n\n//   return (\n//     <>\n//       <h1>Todo List</h1>\n//       <textarea />\n//       <button>add Todo</button>\n//       <h2>未完了TODOリスト</h2>\n//       <ul>\n//         {/* {inCompletedList.map((todo)=>(\n//           <li key={todo.id}>\n//             {todo.content}\n//             <button>{todo.done ? \"未完了リストへ\": \"完了リストへ\"}</button>\n//             <button>delete</button>\n//           </li>\n//       ))} */}\n//       </ul>\n\n//       <h2>完了TODOリスト</h2>\n//       <ul>\n//         {/* {completedList.map((todo)=>(\n//           <li key={todo.id}>\n//             {todo.content}\n//           </li>\n//         ))} */}\n//       </ul>\n//     </>\n//   );\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}